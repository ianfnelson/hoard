// <auto-generated />
using System;
using Hoard.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hoard.Core.Data.Migrations
{
    [DbContext(typeof(HoardContext))]
    [Migration("20251101192622_Defaults")]
    partial class Defaults
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hoard.Core.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.AccountValuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValuationGbp")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "AsOfDate")
                        .IsUnique();

                    b.ToTable("AccountValuation", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.AssetClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("AssetClassId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AssetClass", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.AssetSubclass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("AssetSubclassId");

                    b.Property<int>("AssetClassId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AssetSubclass", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(3)")
                        .HasColumnName("CurrencyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HoldingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("AccountId", "InstrumentId", "AsOfDate")
                        .IsUnique();

                    b.ToTable("Holding", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstrumentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetSubclassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("BaseCurrencyId")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<bool>("EnablePriceUpdates")
                        .HasColumnType("bit");

                    b.Property<int>("InstrumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuoteCurrencyId")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TickerApi")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AssetSubclassId");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("InstrumentTypeId");

                    b.HasIndex("QuoteCurrencyId");

                    b.ToTable("Instrument", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.InstrumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("InstrumentTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFxPair")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("InstrumentType", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.InstrumentValuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValuationGbp")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId", "AsOfDate")
                        .IsUnique();

                    b.ToTable("InstrumentValuation", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortfolioId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Portfolio", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.PortfolioAssetTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortfolioAssetTargetId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetSubclassId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Target")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssetSubclassId");

                    b.HasIndex("PortfolioId", "AssetSubclassId")
                        .IsUnique();

                    b.ToTable("PortfolioAssetTarget", null, t =>
                        {
                            t.HasCheckConstraint("CK_Target_0_100", "[Target] BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("Hoard.Core.Domain.PortfolioValuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValuationGbp")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId", "AsOfDate")
                        .IsUnique();

                    b.ToTable("PortfolioValuation", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdjustedClose")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateOnly>("AsOfDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("RetrievedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId", "AsOfDate")
                        .IsUnique();

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ask")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Bid")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("FiftyTwoWeekHigh")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("FiftyTwoWeekLow")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularMarketChange")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("RegularMarketChangePercent")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("RegularMarketPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("RetrievedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId")
                        .IsUnique();

                    b.ToTable("Quote", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Date");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategory", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionLeg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionLegId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Units")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("ValueGbp")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionLeg", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionLegCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TransactionLegCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TransactionLegCategory", (string)null);
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionLegSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("TransactionLegSubcategoryId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TransactionLegSubcategory", (string)null);
                });

            modelBuilder.Entity("PortfolioAccount", b =>
                {
                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("PortfolioAccount");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Account", b =>
                {
                    b.HasOne("Hoard.Core.Domain.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("Hoard.Core.Domain.AccountValuation", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Hoard.Core.Domain.AssetSubclass", b =>
                {
                    b.HasOne("Hoard.Core.Domain.AssetClass", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClass");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Holding", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Instrument", b =>
                {
                    b.HasOne("Hoard.Core.Domain.AssetSubclass", "AssetSubclass")
                        .WithMany()
                        .HasForeignKey("AssetSubclassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.InstrumentType", "InstrumentType")
                        .WithMany()
                        .HasForeignKey("InstrumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Currency", "QuoteCurrency")
                        .WithMany()
                        .HasForeignKey("QuoteCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetSubclass");

                    b.Navigation("BaseCurrency");

                    b.Navigation("InstrumentType");

                    b.Navigation("QuoteCurrency");
                });

            modelBuilder.Entity("Hoard.Core.Domain.InstrumentValuation", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Hoard.Core.Domain.PortfolioAssetTarget", b =>
                {
                    b.HasOne("Hoard.Core.Domain.AssetSubclass", "AssetSubclass")
                        .WithMany()
                        .HasForeignKey("AssetSubclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Portfolio", "Portfolio")
                        .WithMany("AssetTargets")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetSubclass");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Hoard.Core.Domain.PortfolioValuation", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Portfolio", "Portfolio")
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Price", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Quote", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Instrument", "Instrument")
                        .WithOne()
                        .HasForeignKey("Hoard.Core.Domain.Quote", "InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Transaction", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.TransactionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionLeg", b =>
                {
                    b.HasOne("Hoard.Core.Domain.TransactionLegCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.TransactionLegSubcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hoard.Core.Domain.Transaction", "Transaction")
                        .WithMany("Legs")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instrument");

                    b.Navigation("Subcategory");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Hoard.Core.Domain.TransactionLegSubcategory", b =>
                {
                    b.HasOne("Hoard.Core.Domain.TransactionLegCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PortfolioAccount", b =>
                {
                    b.HasOne("Hoard.Core.Domain.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hoard.Core.Domain.Portfolio", null)
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hoard.Core.Domain.Portfolio", b =>
                {
                    b.Navigation("AssetTargets");
                });

            modelBuilder.Entity("Hoard.Core.Domain.Transaction", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
